{"version":3,"sources":["assets/github-logo.png","components/Header.tsx","components/UserCard.tsx","components/RepositoryCard.tsx","APIService.ts","App.tsx","actions/global.ts","serviceWorker.ts","reducers/global.ts","store.ts","index.tsx"],"names":["module","exports","Header","value","type","onChange","onSelectType","style","display","alignItems","marginBottom","src","require","alt","className","placeholder","e","UserCard","avatar_url","login","html_url","href","RepositoryCard","name","owner","score","svn_url","language","description","license","pushed_at","updated_at","Object","keys","length","API","App","useState","setValue","setType","errorMsg","setErrorMsg","total_count","setTotal_count","loading","setLoading","debouncedGetUsers","useCallback","debounce","searchUsers","debouncedGetRepositories","searchRepositories","users","useSelector","state","repositories","dispatch","useDispatch","keyword","a","axios","get","res","data","items","map","url","payload","console","log","callAPI","typeSelected","checkError","color","checkExistingItems","dataLength","target","selectedValue","currentTarget","info","i","key","Boolean","window","location","hostname","match","initialState","persistConfig","storage","persistedReducer","persistReducer","action","store","createStore","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gMAAAA,EAAOC,QAAU,IAA0B,yC,kHCsC5BC,G,MA7BiB,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACtD,OACI,gCACI,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,WAAY,SAAUC,aAAc,KAC/D,yBAAKC,IAAKC,EAAQ,IAA8BC,IAAI,cAAcC,UAAU,SAC5E,6BACI,+CACA,mEAGR,6BACI,2BACIV,KAAK,OACLW,YAAY,2BACZZ,MAAOA,EACPE,SAAU,SAACW,GAAD,OAAOX,EAASW,MAE9B,4BACIX,SAAU,SAACW,GAAD,OAAOV,EAAaU,IAC9Bb,MAAOC,GAEP,4BAAQD,MAAM,SAAd,SACA,4BAAQA,MAAM,gBAAd,qB,iBCRLc,EAdyB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC1D,OACI,yBAAKN,UAAU,aACX,yBAAKA,UAAU,qBACX,yBAAKH,IAAKO,EAAYL,IAAKM,IAC3B,yBAAKL,UAAU,aACX,4BAAKK,GACL,uBAAGE,KAAMD,GAAT,qBCoCLE,EAjCsC,SAAC,GAU/C,IATHC,EASE,EATFA,KASE,IARFC,MAASL,EAQP,EAROA,MAAOD,EAQd,EARcA,WAAYE,EAQ1B,EAR0BA,SAC5BK,EAOE,EAPFA,MACAC,EAME,EANFA,QACAC,EAKE,EALFA,SACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,QACAC,EAEE,EAFFA,UACAC,EACE,EADFA,WAEA,OACI,yBAAKjB,UAAU,aACX,yBAAKA,UAAU,qBACX,yBAAKH,IAAKO,EAAYL,IAAKM,IAC3B,yBAAKL,UAAU,aACX,4BAAKS,GACL,yBAAKT,UAAU,aACX,uCAAY,8BAAM,uBAAGO,KAAMD,GAAWD,KACtC,qCAAU,8BAAOS,IAChBD,GAAY,yCAAc,8BAAOA,IAClC,0CAAe,8BAAOG,IACtB,2CAAgB,8BAAOC,IACtBF,GAAWG,OAAOC,KAAKJ,GAASK,QAAU,wCAAa,8BAAOL,EAAQN,OACvE,sCAAW,8BAAOE,KAEtB,uBAAGJ,KAAMK,GAAT,wB,eC7CPS,EAAc,yBCoJZC,EAxIO,WAAO,IAAD,EACAC,mBAAiB,IADjB,mBACnBlC,EADmB,KACZmC,EADY,OAEFD,mBAAiB,SAFf,mBAEnBjC,EAFmB,KAEbmC,EAFa,OAGMF,oBAAkB,GAHxB,mBAGnBG,EAHmB,KAGTC,EAHS,OAIYJ,mBAAiB,GAJ7B,mBAInBK,EAJmB,KAINC,EAJM,OAKIN,oBAAS,GALb,mBAKnBO,EALmB,KAKVC,EALU,KAMpBC,EAAoBC,sBAAYC,oBAAS,SAAC7C,GAAD,OAAW8C,EAAY9C,KAAQ,KAAM,IAC9E+C,EAA2BH,sBAAYC,oBAAS,SAAC7C,GAAD,OAAWgD,EAAmBhD,KAAQ,KAAM,IAC5FiD,EAAQC,aAA+C,SAAAC,GAAK,OAAIA,EAAMF,SACtEG,EAAeF,aAAsD,SAAAC,GAAK,OAAIA,EAAMC,gBACpFC,EAAWC,cAEXR,EAAW,uCAAG,WAAOS,GAAP,iBAAAC,EAAA,sEAEhBd,GAAW,GAFK,SAGAe,IAAMC,IAAN,UAAa1B,EAAb,2BAAmCuB,EAAnC,aAHA,OAGZI,EAHY,OAIhBrB,GAAY,GAEZE,EAAemB,EAAIC,KAAKrB,aAEpBqB,EAAOD,EAAIC,KAAKC,MAAMC,KAAI,kBAKV,CAClB/C,WAN4B,EAC5BA,WAMAC,MAP4B,EAE5BA,MAMAC,SAR4B,EAG5BA,SAMA8C,IAT4B,EAI5BA,QAQFV,ECxByC,CAC3CpD,KAAM,uBDwBJoD,ECvC6C,CAC/CpD,KAAM,cACN+D,QDqCoBJ,IAClBlB,GAAW,GACXJ,GAAY,GAvBI,kDAyBhBe,ECjCkC,CACpCpD,KAAM,gBDiCJyC,GAAW,GACXuB,QAAQC,IAAR,MACA5B,GAAY,GA5BI,0DAAH,sDAgCXU,EAAkB,uCAAG,WAAOO,GAAP,eAAAC,EAAA,sEAEvBd,GAAW,GAFY,SAGPe,IAAMC,IAAN,UAAa1B,EAAb,kCAA0CuB,IAHnC,OAGnBI,EAHmB,OAIvBnB,EAAemB,EAAIC,KAAKrB,aACxBD,GAAY,GACZe,EC9CkC,CACpCpD,KAAM,gBD8CJoD,ECpDoD,CACtDpD,KAAM,qBACN+D,QDkD2BL,EAAIC,KAAKC,QAClCnB,GAAW,GARY,kDAUvBW,EC9CyC,CAC3CpD,KAAM,uBD8CJyC,GAAW,GACXuB,QAAQC,IAAR,MACA5B,GAAY,GAbW,0DAAH,sDAqBlB6B,EAAU,SAACZ,EAAiBa,GAC7Bb,EAAQxB,QAAU,EACnBqC,EAAezB,EAAkBY,GAAWR,EAAyBQ,GALpDF,EAAV,UAATpD,EC1DoC,CACpCA,KAAM,eAGqC,CAC3CA,KAAM,wBD8EFoE,EAAa,SAACD,GAClB,OAAO/B,GAAYrC,EAAM+B,QAAU,GAAKqC,GAAgB,uBAAGhE,MAAO,CAAEkE,MAAO,QAAnB,oDAGpDC,EAAqB,SAACC,EAAoBJ,GAC9C,OAAQ/B,GAAYrC,EAAM+B,QAAU,IAAMU,IAAY+B,GAAcJ,GAAgC,IAAhB7B,EAAoB,gEAAqC,0BAAM5B,UAAU,SAAhB,IAA0BX,EAA1B,MAA8C,MAG7L,OACE,yBAAKW,UAAS,oBAAyB,KAAVX,GAAkBiD,EAAMlB,QAAWqB,EAAarB,OAAoB,GAAV,UACrF,kBAAC,EAAD,CACE/B,MAAOA,EACPC,KAAMA,EACNC,SA3BW,SAACW,GAChB6B,GAAW,GACX,IAAIa,EAAU1C,EAAE4D,OAAOzE,MACvBmC,EAASoB,GACTY,EAAQZ,EAAkB,UAATtD,GACjByC,GAAW,IAuBPvC,aApBe,SAACU,GACpB,IAAI6D,EAAgB7D,EAAE8D,cAAc3E,MACpCoC,EAAQsC,GACRP,EAAQnE,EAAyB,UAAlB0E,MAmBb,yBAAK/D,UAAU,iBACZ8B,EACC,yCAEA,oCAEIQ,EAAMlB,OAAS,EAAIkB,EAAMa,KAAI,SAACc,EAAWC,GAAZ,OAC3B,kBAAC,EAAD,iBAAcD,EAAd,CAAoBE,IAAKD,QAEzB,oCACGN,EAAmBnB,EAAarB,OAAiB,UAAT9B,GACxCoE,EAAoB,UAATpE,IAMhBmD,EAAarB,OAAS,EAAIqB,EAAaU,KAAI,SAACc,EAAWC,GAAZ,OACzC,kBAAC,EAAD,iBAAoBD,EAApB,CAA0BE,IAAKD,QAE/B,oCACGN,EAAmBtB,EAAMlB,OAAiB,iBAAT9B,GACjCoE,EAAoB,iBAATpE,QE7HV8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCVAC,EAAe,CACjBnC,MAAO,GACPG,aAAc,I,gBCLZiC,EAAgB,CAClBP,IAAK,OACLQ,Q,OAAAA,GAGEC,EAAmBC,YAAeH,GDGX,WAAuD,IAAtDlC,EAAqD,uDAAjCiC,EAAcK,EAAmB,uCAC/E,OAAOA,EAAOxF,MACV,IAAK,cACD,OAAO,2BACAkD,GADP,IAEIF,MAAM,YAAKwC,EAAOzB,WAE1B,IAAK,qBACD,OAAO,2BACAb,GADP,IAEIC,aAAa,YAAKqC,EAAOzB,WAEjC,IAAK,cACD,OAAO,2BACAb,GADP,IAEIF,MAAO,KAEf,IAAK,qBACD,OAAO,2BACAE,GADP,IAEIC,aAAc,KAEtB,QACI,OAAOD,MCxBfuC,EAAaC,YAAYJ,GACzBK,EAAYC,YAAaH,G,QCJ7BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAaE,UAAWA,GACtB,kBAAC,EAAD,SAINK,SAASC,eAAe,SH0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.b7a26338.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.b71bc541.png\";","import React from 'react';\r\n\r\nexport type Props = {\r\n    value: string;\r\n    type: string;\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    onSelectType: (e: React.FormEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst Header: React.FC<Props> = ({ value, type, onChange, onSelectType }) => {\r\n    return (\r\n        <header>\r\n            <div style={{ display: 'flex', alignItems: 'center', marginBottom: 20 }}>\r\n                <img src={require('../assets/github-logo.png')} alt=\"Github Logo\" className=\"logo\" />\r\n                <div>\r\n                    <h1>Github Searcher</h1>\r\n                    <p>Search users or repositories below</p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Start typing to search..\"\r\n                    value={value}\r\n                    onChange={(e) => onChange(e)}\r\n                />\r\n                <select\r\n                    onChange={(e) => onSelectType(e)}\r\n                    value={type}\r\n                >\r\n                    <option value=\"Users\">Users</option>\r\n                    <option value=\"Repositories\">Repositories</option>\r\n                </select>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nexport interface IUsersProps {\r\n    avatar_url: string;\r\n    login: string;\r\n    html_url: string;\r\n    url: string;\r\n}\r\n\r\nconst UserCard: React.FC<IUsersProps> = ({ avatar_url, login, html_url }) => {\r\n    return (\r\n        <div className=\"user-card\">\r\n            <div className=\"user-card-content\">\r\n                <img src={avatar_url} alt={login} />\r\n                <div className=\"card-info\">\r\n                    <h4>{login}</h4>\r\n                    <a href={html_url}>Go to Profile</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCard;","import React from 'react'\r\n\r\ntype Owner = {\r\n    login: string;\r\n    avatar_url: string;\r\n    html_url: string;\r\n}\r\nexport interface IRepositoriesProps {\r\n    name: string;\r\n    owner: Owner;\r\n    score: number;\r\n    svn_url: string;\r\n    language: string;\r\n    description: string;\r\n    license: any;\r\n    pushed_at: string;\r\n    updated_at: string;\r\n}\r\n\r\nconst RepositoryCard: React.FC<IRepositoriesProps> = ({\r\n    name,\r\n    owner: { login, avatar_url, html_url },\r\n    score,\r\n    svn_url,\r\n    language,\r\n    description,\r\n    license,\r\n    pushed_at,\r\n    updated_at\r\n}) => {\r\n    return (\r\n        <div className=\"user-card\">\r\n            <div className=\"user-card-content\">\r\n                <img src={avatar_url} alt={login} />\r\n                <div className=\"card-info\">\r\n                    <h4>{name}</h4>\r\n                    <div className=\"repo-info\">\r\n                        <h5>Author: <span><a href={html_url}>{login}</a></span></h5>\r\n                        <h5>Desc: <span>{description}</span></h5>\r\n                        {language && <h5>Language: <span>{language}</span></h5>}\r\n                        <h5>Pushed At: <span>{pushed_at}</span></h5>\r\n                        <h5>Updated At: <span>{updated_at}</span></h5>\r\n                        {license && Object.keys(license).length && <h5>License: <span>{license.name}</span></h5>}\r\n                        <h5>Score: <span>{score}</span></h5>\r\n                    </div>\r\n                    <a href={svn_url}>Go to Repository</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RepositoryCard;","export const API: string = 'https://api.github.com';","import React, { useState, useCallback } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport axios from 'axios';\nimport UserCard, { IUsersProps } from './components/UserCard';\nimport RepositoryCard from './components/RepositoryCard';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { GlobalState } from './reducers/global';\nimport { getUsers, getRepositories, clearUsers, clearRepositories } from './actions/global';\nimport { debounce } from 'lodash';\nimport { API } from './APIService';\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<string>(''),\n        [type, setType] = useState<string>('Users'),\n        [errorMsg, setErrorMsg] = useState<boolean>(false),\n        [total_count, setTotal_count] = useState<number>(1),\n        [loading, setLoading] = useState(false),\n        debouncedGetUsers = useCallback(debounce((value) => searchUsers(value), 500), []),\n        debouncedGetRepositories = useCallback(debounce((value) => searchRepositories(value), 500), []),\n        users = useSelector<GlobalState, GlobalState['users']>(state => state.users),\n        repositories = useSelector<GlobalState, GlobalState['repositories']>(state => state.repositories),\n        dispatch = useDispatch();\n\n  const searchUsers = async (keyword: string) => {\n    try {\n      setLoading(true);\n      let res = await axios.get(`${API}/search/users?q=${keyword}+in:user`);\n      setErrorMsg(false);\n\n      setTotal_count(res.data.total_count);\n\n      let data = res.data.items.map(({\n        avatar_url,\n        login,\n        html_url,\n        url\n      }: IUsersProps) => ({\n        avatar_url,\n        login,\n        html_url,\n        url\n      }))\n\n      dispatch(clearRepositories())\n      dispatch(getUsers(data));\n      setLoading(false);\n      setErrorMsg(false);\n    } catch (error) {\n      dispatch(clearUsers())\n      setLoading(false);\n      console.log(error);\n      setErrorMsg(true);\n    }\n  }\n\n  const searchRepositories = async (keyword: string) => {\n    try {\n      setLoading(true);\n      let res = await axios.get(`${API}/search/repositories?q=${keyword}`);\n      setTotal_count(res.data.total_count);\n      setErrorMsg(false);\n      dispatch(clearUsers())\n      dispatch(getRepositories(res.data.items));\n      setLoading(false);\n    } catch (error) {\n      dispatch(clearRepositories())\n      setLoading(false);\n      console.log(error);\n      setErrorMsg(true);\n    }\n  }\n\n  const clearData = () => {\n    type === 'Users' ? dispatch(clearUsers()) : dispatch(clearRepositories());\n  }\n\n  const callAPI = (keyword: string, typeSelected: boolean) => {\n    if(keyword.length >= 3){\n      typeSelected ? debouncedGetUsers(keyword) : debouncedGetRepositories(keyword);\n    } else {\n      clearData();\n    }\n  }\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    setLoading(true);\n    let keyword = e.target.value;\n    setValue(keyword);\n    callAPI(keyword, type === 'Users');\n    setLoading(false);\n  }\n\n  const onSelectType = (e: React.FormEvent<HTMLSelectElement>): void => {\n    let selectedValue = e.currentTarget.value;\n    setType(selectedValue);\n    callAPI(value, selectedValue === 'Users');\n  }\n\n  const checkError = (typeSelected: boolean) => {\n    return errorMsg && value.length >= 3 && typeSelected && <p style={{ color: 'red' }}>Something went wrong or API rate limit exceeded</p>\n  }\n\n  const checkExistingItems = (dataLength: number, typeSelected: boolean) => {\n    return !errorMsg && value.length >= 3 && !loading && !dataLength && typeSelected && total_count === 0 ? <p>There is no items match the search<span className=\"value\">`{value}`</span></p>: null\n  }\n\n  return (\n    <div className={`container ${value === '' && (!users.length && !repositories.length) ? 'align' : ''}`}>\n      <Header\n        value={value}\n        type={type}\n        onChange={onChange}\n        onSelectType={onSelectType}\n      />\n      <div className=\"cards-wrapper\">\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <>\n            {\n              users.length > 0 ? users.map((info: any, i) => (\n                <UserCard {...info} key={i} />\n              )) : (\n                <>\n                  {checkExistingItems(repositories.length, type === 'Users')}\n                  {checkError(type === 'Users')}\n                </>\n              )\n            }\n    \n            {\n              repositories.length > 0 ? repositories.map((info: any, i) => (\n                <RepositoryCard {...info} key={i} />\n              )) : (\n                <>\n                  {checkExistingItems(users.length, type === 'Repositories')}\n                  {checkError(type === 'Repositories')}\n                </>\n              )\n            }\n          </>\n        )}        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\r\nexport interface Action {\r\n    type: string,\r\n    payload?: any\r\n}\r\n\r\nexport const getUsers = (payload: any): Action => ({\r\n    type: 'FETCH_USERS',\r\n    payload\r\n});\r\n\r\nexport const getRepositories = (payload: any): Action => ({\r\n    type: 'FETCH_REPOSITORIES',\r\n    payload\r\n});\r\n\r\nexport const clearUsers = ():Action => ({\r\n    type: 'CLEAR_USERS'\r\n});\r\n\r\nexport const clearRepositories = ():Action => ({\r\n    type: 'CLEAR_REPOSITORIES'\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Action } from '../actions/global';\r\nimport { IUsersProps } from '../components/UserCard';\r\nimport { IRepositoriesProps } from '../components/RepositoryCard';\r\nexport interface GlobalState {\r\n    users: Array<IUsersProps>,\r\n    repositories: Array<IRepositoriesProps>\r\n}\r\n\r\nconst initialState = {\r\n    users: [],\r\n    repositories: []\r\n}\r\n\r\nexport const globalReducer = (state:GlobalState = initialState, action: Action) => {\r\n    switch(action.type){\r\n        case 'FETCH_USERS':\r\n            return {\r\n                ...state,\r\n                users: [...action.payload]\r\n            }\r\n        case 'FETCH_REPOSITORIES':\r\n            return {\r\n                ...state,\r\n                repositories: [...action.payload]\r\n            }\r\n        case 'CLEAR_USERS':\r\n            return {\r\n                ...state,\r\n                users: []\r\n            }\r\n        case 'CLEAR_REPOSITORIES':\r\n            return {\r\n                ...state,\r\n                repositories: []\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore } from 'redux';\r\nimport { globalReducer } from './reducers/global';\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, globalReducer)\r\n\r\nlet store: any = createStore(persistedReducer)\r\nlet persistor = persistStore(store)\r\n\r\nexport {\r\n    store, persistor\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './store';\nimport { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}